version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: forecast-postgres
    environment:
      POSTGRES_DB: forecast_my_park
      POSTGRES_USER: areefsyed
      POSTGRES_PASSWORD: Areef123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data-scripts/Migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U areefsyed"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Data Loader - Populates database with park data
  data-loader:
    build:
      context: ./data-scripts
      dockerfile: Dockerfile
    container_name: forecast-data-loader
    environment:
      - DATABASE_URL=postgresql+psycopg://areefsyed:Areef123@postgres:5432/forecast_my_park
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data-scripts/logs:/app/logs
    restart: "no"  # Run once and exit

  # ML Service
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: forecast-ml-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=forecast_my_park
      - DB_USER=areefsyed
      - DB_PASSWORD=Areef123
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      data-loader:
        condition: service_completed_successfully
    volumes:
      - ./ml-service/models:/app/models
      - ./ml-service/logs:/app/logs
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: forecast-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - ML_SERVICE_URL=http://ml-service:8000
    ports:
      - "3000:3000"
    depends_on:
      - ml-service
    restart: unless-stopped

volumes:
  postgres_data: 